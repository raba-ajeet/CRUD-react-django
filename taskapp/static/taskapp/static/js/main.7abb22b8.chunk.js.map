{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todolist","activetask","id","title","completed","edit","fetchTasks","bind","handleChange","handleSubmit","deletetask","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","e","target","value","console","log","setState","preventDefault","csrf_token","url","fetch","method","headers","body","JSON","stringify","then","response","catch","error","json","data","task","tasks","self","className","onSubmit","action","onChange","type","scope","map","index","onClick","startedit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7abb22b8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass App extends React.Component{\n   constructor(props){\n      super(props);\n      this.state = {\n        todolist:[],  \n        activetask:{\n          id:null,\n          title:'',\n          completed:false,\n        },\n        edit:false,\n      }\n      this.fetchTasks=this.fetchTasks.bind(this)\n      this.handleChange=this.handleChange.bind(this)\n      this.handleSubmit=this.handleSubmit.bind(this)\n      this.deletetask=this.deletetask.bind(this)\n      this.getCookie=this.getCookie.bind(this)\n   };\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n   componentWillMount(){\n     this.fetchTasks()\n   };\n   handleChange(e){\n      var name=e.target.name;\n      var value=e.target.value;\n      console.log(value)\n    this.setState({\n      activetask:{\n        ...this.state.activetask,\n        title:value\n      }\n    })\n    };\n    handleSubmit(e){\n      e.preventDefault()\n      var csrf_token=this.getCookie('csrftoken')\n      console.log('ITEM',this.state.activetask)\n      var url='http://127.0.0.1:8000/task_create/';\n      if(this.state.edit  == true){\n        url=`http://127.0.0.1:8000/task_update/${ this.state.activetask.id}`;\n        this.setState({\n          edit:false\n        })  \n      } \n      fetch(url,{\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          'X-CSRFToken':csrf_token,\n        },\n        body:JSON.stringify(this.state.activetask)\n      }).then((response)=>{\n        this.fetchTasks()\n        this.setState({\n          activetask:{\n            id:null,\n            title:'',\n            completed:false,\n          }\n        })\n      }).catch(function(error){\n        console.log('ERROR',error)\n      })\n    }\n   fetchTasks(){\n      console.log('Fetching ..')\n      fetch('http://127.0.0.1:8000/task_list/')\n      .then(response=>response.json())\n      .then(data =>\n        this.setState({\n          todolist:data\n        }) \n      )\n   };\n   startedit(task){\n    this.setState({\n      activetask:task,\n      edit:true,\n    })\n   }\n   deletetask(task){\n    var csrf_token=this.getCookie('csrftoken')\n    var url=`http://127.0.0.1:8000/task_delete/${task.id}`;\n    fetch(url,{\n      method:'DELETE',\n      headers:{\n        'Content-type':'application/json',\n          'X-CSRFToken':csrf_token,\n      },\n    }).then((response)=>{\n      this.fetchTasks() \n    })\n   }\n  render(){\n    var tasks=this.state.todolist;\n    var self=this;\n    return(\n      <div className=\"container\">\n      <h1> CRUD System Using React And Django</h1>\n        <form  onSubmit={this.handleSubmit} action=\"\">\n        <div className=\"form-group\">\n          <input className=\"form-control\"onChange={this.handleChange} value={this.state.activetask.title} name='title'/>   \n          </div>\n          <div className=\"form-group\" >\n          <input className=\"btn btn-primary\" type=\"submit\" />          \n          </div>\n        </form>\n        <div>\n  <table className=\"table table-dark\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <td scope=\"col\">Task Detail</td>\n      <td scope=\"col\">View</td>\n      <td scope=\"col\" >Delete</td>\n    </tr>\n  </thead>\n  <tbody>\n                  {tasks.map(function(task,index){\n              return  (\n                <tr>\n                  <th scope=\"row\">{index+1}</th>\n                  <td><span>{task.title}</span></td>\n                  <td>\n                  <button id=\"inner_button\" className=\"btn btn-success\" onClick={() => self.startedit(task)}> Edit</button>\n                  </td>\n                  <td>\n                  <button onClick={() => self.deletetask(task)} className=\"btn btn-danger\">delete</button>\n                  </td>\n                </tr>\n              )\n            })}\n            </tbody>\n</table>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}